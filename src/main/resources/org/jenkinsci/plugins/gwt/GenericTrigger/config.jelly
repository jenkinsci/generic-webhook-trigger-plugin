<?jelly escape-by-default='true'?>
<j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler" xmlns:d="jelly:define" xmlns:l="/lib/layout" xmlns:t="/lib/hudson" xmlns:f="/lib/form">
   <f:description>
    <div>
     <p>
      Is triggered by HTTP requests to <b>http://JENKINS_URL/generic-webhook-trigger/invoke</b>
     </p>
     <p>
      There are example configurations in <a href="https://github.com/jenkinsci/generic-webhook-trigger-plugin/tree/master/src/test/resources/org/jenkinsci/plugins/gwt/bdd">the Git repository</a>.
     </p>
     <p>
      You can fiddle with JSONPath <a href="https://jsonpath.curiousconcept.com/">here</a>. You may also want to checkout the syntax <a href="https://github.com/jayway/JsonPath">here</a>.
     </p>
     <p>
      You can fiddle with XPath <a href="http://www.freeformatter.com/xpath-tester.html">here</a>. You may also want to checkout the syntax <a href="https://www.w3schools.com/xml/xpath_syntax.asp">here</a>.
     </p>
     <p>
      You can fiddle with regular expressions <a href="https://jex.im/regulex/">here</a>. You may also want to checkout the syntax <a href="https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html">here</a>.
     </p>
     <p>
      If your job <b>is not parameterized</b>, then the resolved variables will just be contributed to the build. If your job <b>is parameterized</b>, and you resolve variables that have the same name as those parameters, then the plugin will populate the parameters when triggering job. That means you can, for example, use the parameters in combination with an SCM plugin, like GIT Plugin, to pick a branch.
     </p>
    </div>
   </f:description>
   
 <f:entry title="Post content parameters" field="genericVariables">
  <f:repeatableProperty field="genericVariables"  minimum="0" />  
   <f:description>
    If you want value of <b>param1</b> from post content <code>{ "param1": "value1" }</code> to be contributed, you need to add <b>$.param1</b> here.
   </f:description>
 </f:entry>

 <f:entry title="Header parameters" field="genericHeaderVariables">
  <f:repeatableProperty field="genericHeaderVariables"  minimum="0" />  
   <f:description>
    If you want value of header <b>param1</b> to be contributed, you need to add "param1" here.
   </f:description>
 </f:entry>

 <f:entry title="Request parameters" field="genericRequestVariables">
  <f:repeatableProperty field="genericRequestVariables"  minimum="0" />  
   <f:description>
    If you want value of query parameter <b>param1</b> to be contributed, you need to add "param1" here.
   </f:description>
 </f:entry>
 
 <f:entry title="Token">
   <f:textbox field="token"/>
   <f:description>
    Optional token. If it is specified then this job can only be triggered if that token is supplied when invoking <b>http://JENKINS_URL/generic-webhook-trigger/invoke</b>. It can be supplied as a:
    <ul>
     <li>Query parameter <b>/invoke?token=TOKEN_HERE</b></li>
     <li>A token header <b>token: TOKEN_HERE</b></li>
     <li>A Authorization: Bearer header <b>Authorization: Bearer TOKEN_HERE</b></li>
    </ul>
   </f:description>
 </f:entry>

 <f:entry title="Cause">
   <f:textbox field="causeString" default="Generic Cause"/>
   <f:description>
    This will be displayed in any triggered job. You can use the variables here to create a custom cause like <i>"$name committed to $branch"</i>, if you have configured variables named <b>name</b> and <b>branch</b>.
   </f:description>
 </f:entry>

 <f:entry title="Override Quiet Period" field="overrideQuietPeriod">
   <f:checkbox/>
   <f:description>
    Allow the trigger to override this job's quiet period. If selected you can you can provide a quiet period (an integer number of seconds) and the build will use that quiet period instead of its default. If this is selected and no quiet period is given the job's quiet period will still be used. It can be supplied as a:
    <ul>
      <li>Query Parameter <b>/invoke?jobQuietPeriod=QUIET_PERIOD_HERE</b></li>
      <li>A quiet period header <b>jobQuietPeriod: QUIET_PERIOD_HERE</b></li>
    </ul>
   </f:description>
 </f:entry>

 <f:entry title="Silent response" field="silentResponse">
   <f:checkbox/>
   <f:description>
    Avoid responding with information about triggered jobs.
   </f:description>
 </f:entry>

 <f:entry title="Print post content" field="printPostContent">
   <f:checkbox/>
   <f:description>
    Print post content in job log.
   </f:description>
 </f:entry>

 <f:entry title="Print contributed variables" field="printContributedVariables">
   <f:checkbox/>
   <f:description>
    Print contributed variables in job log.
   </f:description>
 </f:entry>


 <f:section title="Optional filter">
  <f:entry title="Expression">
   <f:textbox field="regexpFilterExpression"/>
   <f:description>
    <a href="https://jex.im/regulex/">Regular expression</a> to test on the evaluated text specified below. The regexp syntax is documented <a href="https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html" target="_blank">here</a>.
   </f:description>
  </f:entry>

  <f:entry title="Text">
   <f:textbox field="regexpFilterText"/>
   <f:description>
    Text to test for the given <a href="https://jex.im/regulex/">expression</a>. You can use any combination of the variables you configured above.
   </f:description>
  </f:entry>

  <f:description>
   This is an optional feature. If specified, this job will only trigger when given expression matches given text.
  </f:description>
 </f:section>
</j:jelly>
